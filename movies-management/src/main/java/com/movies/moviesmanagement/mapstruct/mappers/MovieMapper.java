package com.movies.moviesmanagement.mapstruct.mappers;

import com.movies.moviesmanagement.entity.Actor;
import com.movies.moviesmanagement.entity.Director;
import com.movies.moviesmanagement.entity.Movie;
import com.movies.moviesmanagement.mapstruct.dtos.MovieAllDto;
import com.movies.moviesmanagement.mapstruct.dtos.MovieDto;
import com.movies.moviesmanagement.repository.ActorRepository;
import com.movies.moviesmanagement.repository.DirectorRepository;
import org.mapstruct.AfterMapping;
import org.mapstruct.Mapper;
import org.mapstruct.MappingTarget;

import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

@Mapper(componentModel = "spring")
public interface MovieMapper {

    // Direct mappings
    MovieDto movieToMovieDto(Movie movie);

    MovieAllDto movieToMovieAllDto(Movie movie);

    Movie movieDtoToMovie(MovieDto movieDto);

    Movie movieAllDtoToMovie(MovieAllDto movieAllDto);

    // Automatic collection mappings generated by MapStruct
    List<MovieDto> moviesToMovieDtos(List<Movie> movies);

    List<Movie> movieDtosToMovies(List<MovieDto> movieDtos);

    List<MovieAllDto> moviesToMovieAllDtos(List<Movie> movies);

    List<Movie> movieAllDtosToMovies(List<MovieAllDto> movieAllDtos);


    @AfterMapping
    default void afterMovieMapping(Movie movie, @MappingTarget MovieAllDto dto) {
        dto.setMovieActorIds(movie.getMovieActors().stream()
                .map(Actor::getActorID)
                .collect(Collectors.toSet()));
        if (movie.getMovieDirector() != null) {
            dto.setMovieDirectorId(movie.getMovieDirector().getDirectorID());
        }
    }

    @AfterMapping
    default void dtoToEntityAfterMapping(@MappingTarget Movie movie, MovieAllDto dto, ActorRepository actorRepository, DirectorRepository directorRepository) {
        Set<Actor> actors = dto.getMovieActorIds().stream()
                .map(actorRepository::findById)
                .filter(Optional::isPresent)
                .map(Optional::get)
                .collect(Collectors.toSet());

        movie.setMovieActors(actors);

        // Update the relationship on the actor side
        for (Actor actor : actors) {
            actor.addMovie(movie); // Use the synchronization helper method
        }

        Director director = directorRepository.findById(dto.getMovieDirectorId()).orElse(null);
        movie.setMovieDirector(director);
    }
}

package com.cinema.cinemaproject.mapstruct.mappers;

import com.cinema.cinemaproject.entity.Director;
import com.cinema.cinemaproject.entity.Movie;
import com.cinema.cinemaproject.mapstruct.dtos.DirectorAllDto;
import com.cinema.cinemaproject.mapstruct.dtos.DirectorDto;
import com.cinema.cinemaproject.repository.MovieRepository;
import org.mapstruct.AfterMapping;
import org.mapstruct.Mapper;
import org.mapstruct.MappingTarget;

import java.util.*;
import java.util.stream.Collectors;

@Mapper(componentModel = "spring")
public interface DirectorMapper {

    // Direct mappings
    DirectorDto directorToDirectorDto(Director director);

    DirectorAllDto directorToDirectorAllDto(Director director);

    Director directorDtoToDirector(DirectorDto directorDto);

    Director directorAllDtoToDirector(DirectorAllDto directorAllDto);

    // Automatic collection mappings generated by MapStruct
    List<DirectorDto> directorsToDirectorDtos(List<Director> directors);

    List<Director> directorDtosToDirectors(List<DirectorDto> directorDtos);

    List<DirectorAllDto> directorsToDirectorAllDtos(List<Director> directors); // You already have this one

    List<Director> directorAllDtosToDirectors(List<DirectorAllDto> directorAllDtos);

    @AfterMapping
    default void afterDirectorMapping(Director director, @MappingTarget DirectorAllDto dto) {
        if (director.getDirectorMovies() != null) {
            dto.setDirectorMovieIds(director.getDirectorMovies().stream()
                    .map(Movie::getMovieID)
                    .collect(Collectors.toSet()));
        } else {
            dto.setDirectorMovieIds(Collections.emptySet());
        }
    }

    @AfterMapping
    default void dtoToEntityAfterMapping(@MappingTarget Director director, DirectorAllDto dto, MovieRepository movieRepository) {
        if (dto.getDirectorMovieIds() != null) {
            Set<Movie> movies = dto.getDirectorMovieIds().stream()
                    .flatMap(id -> movieRepository.findById(id).stream())
                    .collect(Collectors.toSet());

            director.setDirectorMovies(movies);
        } else {
            director.setDirectorMovies(new HashSet<>()); // or other default value if appropriate
        }
    }
}

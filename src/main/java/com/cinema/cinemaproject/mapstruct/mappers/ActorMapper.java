package com.cinema.cinemaproject.mapstruct.mappers;

import com.cinema.cinemaproject.entity.Actor;
import com.cinema.cinemaproject.entity.Movie;
import com.cinema.cinemaproject.mapstruct.dtos.ActorAllDto;
import com.cinema.cinemaproject.mapstruct.dtos.ActorDto;
import com.cinema.cinemaproject.repository.MovieRepository;
import org.mapstruct.AfterMapping;
import org.mapstruct.Mapper;
import org.mapstruct.MappingTarget;

import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

@Mapper(componentModel = "spring")
public interface ActorMapper {

    // Direct mappings
    ActorDto actorToActorDto(Actor actor);

    ActorAllDto actorToActorAllDto(Actor actor);

    Actor actorDtoToActor(ActorDto actorDto);

    Actor actorAllDtoToActor(ActorAllDto actorAllDto);

    // Automatic collection mappings generated by MapStruct
    List<ActorDto> actorsToActorDtos(List<Actor> actors);

    List<Actor> actorDtosToActors(List<ActorDto> actorDtos);

    List<ActorAllDto> actorsToActorAllDtos(List<Actor> actors); // You already have this one

    List<Actor> actorAllDtosToActors(List<ActorAllDto> actorAllDtos);

    @AfterMapping
    default void afterActorMapping(Actor actor, @MappingTarget ActorAllDto dto) {
        if (actor.getActorMovies() != null) {
            dto.setActorMovieIds(actor.getActorMovies().stream()
                    .map(Movie::getMovieID)
                    .collect(Collectors.toSet()));
        } else {
            dto.setActorMovieIds(Collections.emptySet());
        }
    }

    @AfterMapping
    default void dtoToEntityAfterMapping(@MappingTarget Actor actor, ActorAllDto dto, MovieRepository movieRepository) {
        Set<Movie> movies;
        if (dto.getActorMovieIds() != null) {
            movies = dto.getActorMovieIds().stream()
                    .flatMap(id -> movieRepository.findById(id).stream())
                    .collect(Collectors.toSet());
        } else {
            movies = Collections.emptySet();
        }

        actor.setActorMovies(movies);

        // Update the relationship on the movie side
        for (Movie movie : movies) {
            movie.addActor(actor); // Ensure this method handles bidirectional synchronization properly.
        }
    }
}
